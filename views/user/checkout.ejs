<%- include ('../layouts/header.ejs') %>


    <div class="container wrapper">

        <div class="carts">
            <div class="cart-head">
                <h2 class="cart-title">Checkout</h2>
                <!-- <button class="carrt-button">
                    <i></i>
                    Address
                </button> -->
            </div>

            <div class="cart-items">

                <div class=" checkout">
                    <div class="banner">Delivery Address</div>
                    <div class="address_list">
                        <!-- DYNAMIC DATA  -->
                    </div>
                </div>

            </div>
            <button id="btnOpenForm">Add New Address</button>
        </div>

        <div class="proceedSidebar">
            <div class="desc">
                <p>how are shipping costs calculated? shipping have been applied to your order</p>
            </div>
            <div class="sidebar-heading">
                <h2>Order Summary</h2>
            </div>
            <div class="sidebar-details">
                <div class="group-data">
                    <div class="data-title">Items( <span item-count> </span> ):</div>
                    <div id="totalPrice" class="title-value">₹<span></span></div>
                </div>
                <div class="group-data">
                    <div class="data-title"> shipping & handling:</div>
                    <div class="title-value">₹98.00</div>
                </div>
                <div class="group-data">
                    <div class="data-title">Delivery Charges:</div>
                    <div class="title-value">₹0.00</div>
                </div>
                <div class="group-data">
                    <div class="data-total">total Payable:</div>
                    <div class="title-value">₹<span id="totalPayable"></span> </div>
                </div>
                <button class="btn-proceed" proceed-pay>Proceed to Payment</button>
            </div>
        </div>

    </div>


    <div class="form-popup-bg">
        <div class="form-container">
            <button id="btnCloseForm" class="modal-close-btn">
                <ion-icon id="btnCloseForm" name="close-outline"></ion-icon>
            </button>
            <h1>Add Shipping address</h1>
            <!-- <p>For more information. Please complete this form.</p> -->

            <form id="add-new-address" method="post">
                <div class="field-group">
                    <div class="form-group">
                        <label for="">Name</label>
                        <input id="name" type="text" name="custName" class="form-control" />
                        <span class="invalid error" id="error-name"></span>
                    </div>
                    <div class="form-group">
                        <label for="">Mobile</label>
                        <input class="form-control" type="number" id="phone" name="mobile" type="text" />
                        <span class="invalid error" id="mobile-error"></span>
                    </div>
                </div>

                <div class="field-group">
                    <div class="form-group">
                        <label for="">zipCode</label>
                        <input class="form-control" id="zipCode" name="zipCode" type="text" />
                        <span class="invalid error" id="zipcode-error"></span>

                    </div>
                    <div class="form-group">
                        <label for="">Locality</label>
                        <input class="form-control" id="locality" name="locality" type="text" />
                        <span class="invalid error" id="locality-error"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label for="">Address</label>
                    <textarea class="form-control" id="address" name="address" type="text" cols="30"
                        rows="5"></textarea>
                    <span class="invalid error" id="address-error"></span>

                </div>


                <div class="field-group">
                    <div class="form-group">
                        <label for="">City</label>
                        <input class="form-control" id="city" name="city" type="text" />
                        <span class="invalid error" id="city-error"></span>

                    </div>
                    <div class="form-group">
                        <label for="">State</label>
                        <select class="form-control" id="state" name="state" type="text">
                            <option value=""></option>
                        </select>
                        <span class="invalid error" id="state-error"></span>


                    </div>
                </div>

                <button type="submit">Submit</button>
            </form>
        </div>
    </div>


    <script>
        const form = document.getElementById('add-new-address');

       

        let isValid = true;

        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            clearErrorMessages();

            // Validate form fields
            const name = document.getElementById('name');
            const mobile = document.getElementById('phone');
            const zipCode = document.getElementById('zipCode');
            const locality = document.getElementById('locality');
            const address = document.getElementById('address');
            const city = document.getElementById('city');
            const state = document.getElementById('state');


            isValid = true; // Reset isValid before validating the form fields

            if (!name.value.trim()) {
                showError("error-name", "name field is required !");
                isValid = false;
            }

            if (state.value === "") {
                showError("state-error", "Please select a state.");
                isValid = false;
            }

            if (!mobile.value.trim()) {
                showError("mobile-error", "mobile field is required !");
                isValid = false;
            }

            if (!locality.value.trim()) {
                showError("locality-error", "locality field is required !");
                isValid = false;
            }

            if (!city.value.trim()) {
                showError("city-error", "city field is required !");
                isValid = false;
            }

            if (!zipCode.value.trim()) {
                showError("zipcode-error", "zipCode field is required !");
                isValid = false;
            } else if (isNaN(zipCode.value)) {
                showError("zipcode-error", "zipCode must be a valid number.");
                isValid = false;
            }

            if (!address.value.trim()) {
                showError("address-error", "Please enter the shipping address.");
                isValid = false;
            }

            try {
                if (isValid) {
                    const formData = {
                        custName: name.value,
                        mobile: mobile.value,
                        zipCode: zipCode.value,
                        state: state.value,
                        locality: locality.value,
                        city: city.value,
                        address: address.value
                    }
                    const response = await axios.post('/api/v1/user/address', formData);
                    getCheckOut()

                }
            } catch (error) {
                const message = error.response.data.message;
                console.log(message)
            }
        });

        function showError(element, errorMessage) {
            const errorElement = document.querySelector(`#${element}`)
            errorElement.textContent = errorMessage
        }

        function countWords(text) {
            const trimmedText = text.trim();
            const words = trimmedText.split(/\s+/);
            return words.length;
        }

        function clearErrorMessages() {
            const errorElements = document.querySelectorAll(".error");
            errorElements.forEach((element) => {
                element.textContent = "";
            });
        }

        function fetchStates() {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'https://cdn-api.co-vin.in/api/v2/admin/location/states', true);

            xhr.onload = function () {
                if (xhr.status >= 200 && xhr.status < 400) {
                    var response = JSON.parse(xhr.responseText);
                    var states = response.states;
                    var selectElement = document.getElementById('state');

                    states.forEach(function (state) {
                        var option = document.createElement('option');
                        option.value = state.state_name;
                        option.textContent = state.state_name;
                        selectElement.appendChild(option);
                    });
                } else {
                    console.error('Error fetching states:', xhr.status);
                }
            };

            xhr.onerror = function () {
                console.error('Error fetching states:', xhr.status);
            };

            xhr.send();
        }

        // Call the fetchStates function to fetch and render the states
        fetchStates();



    </script>

    <script>
        function closeForm() {
            document.querySelector('.form-popup-bg').classList.remove('is-visible');
        }

        document.addEventListener('DOMContentLoaded', function () {
            var btnOpenForm = document.getElementById('btnOpenForm');
            var formPopupBg = document.querySelector('.form-popup-bg');
            var btnCloseForm = document.getElementById('btnCloseForm');

            /* Contact Form Interactions */
            btnOpenForm.addEventListener('click', function (event) {
                event.preventDefault();
                formPopupBg.classList.add('is-visible');
            });

            // close popup when clicking x or off popup
            formPopupBg.addEventListener('click', function (event) {
                if (event.target.classList.contains('form-popup-bg') || event.target.id === 'btnCloseForm') {
                    event.preventDefault();
                    formPopupBg.classList.remove('is-visible');
                }
            });
        });


    </script>





    <%- include ('../layouts/footer.ejs') %>