<%- include ('../layouts/header.ejs') %>


    <div class="container">
        <div class="header">
            <p>Tracking My Order</p>
            <nav>
                <ul class="menu-category-list">
                    <li class="meanu-category"><a class="ajax-link active" href="/orders">Orders</a></li>
                    <li><a class="ajax-link" href="/delivered">Delivered</a></li>
                    <li><a class="ajax-link" href="/cancelled">Cancelled</a></li>
                </ul>
            </nav>
        </div>

        <main orders-history>
            <!-- DYNAMIC DATA COMES  -->
        </main>

        <div class="form-popup-bg">
            <div class="form-container">
                <button id="btnCloseForm" class="modal-close-btn">
                    <ion-icon id="btnCloseForm" name="close-outline"></ion-icon>
                </button>
                <h1>Cancel Order Request</h1>
                <!-- <p>For more information. Please complete this form.</p> -->

                <form id="reasonForCancel" method="post">
                    <input type="hidden" id="orderId">

                    <div class="form-group">
                        <label for="">Reason for Order Canceling</label>
                        <textarea class="form-control" id="reason" name="reason" type="text" cols="30"
                            rows="5"></textarea>
                        <span class="invalid error" id="reason-error"></span>

                    </div>

                    <button type="submit">Order Cancel</button>
                </form>
            </div>
        </div>


    </div>

    <script>
        // Handle Orders Pagination

        // Assuming you have included the Axios library in your HTML file
        const ajaxLinks = document.querySelectorAll('.ajax-link');


        ajaxLinks.forEach(link => {
            link.addEventListener('click', e => {
                e.preventDefault();

                const href = link.getAttribute('href');
                const url = `/api/v1/user/orders`;

                let queryString = '';
                if (href === '/delivered') {
                    queryString += `${url}/?status=delivered`;
                } else if (href === '/cancelled') {
                    queryString += `${url}/?status=cancelled`;
                } else if (href === '/return') {
                    queryString += `${url}/?status=return`;
                } else {
                    queryString += `${url}`;
                }

                // Remove active class from all links
                ajaxLinks.forEach(link => {
                    link.classList.remove('active');
                });

                // Add active class to the clicked link
                link.classList.add('active');


                axios.get(queryString)
                    .then(response => {
                        console.log(response);

                        const row = document.querySelector('[orders-history]');
                        const { data } = response.data;

                        // Clear existing content from the DOM
                        while (row.firstChild) {
                            row.firstChild.remove();
                        }

                        const promises = data.map(order => {
                            const { items, shippingAddress } = order;
                            const productId = items[0].product;
                            const productRequest = axios.get(`/api/v1/admin/product/${productId}`);
                            const cartRequest = axios.get('/api/v1/user/cart');

                            return Promise.all([productRequest, cartRequest])
                                .then(([productResponse, cartResponse]) => {
                                    const { products } = productResponse.data.data;
                                    const { cart } = cartResponse.data;

                                    const shippingAddressFound = cart.shippingAddress.find(address => address._id === order.shippingAddress);
                                    if (!shippingAddressFound) {
                                        console.log("No address found");
                                    }

                                    const MAX_DESCRIPTION_LENGTH = 50;
                                    let truncatedDescription = products.description;
                                    if (truncatedDescription.length > MAX_DESCRIPTION_LENGTH) {
                                        truncatedDescription = truncatedDescription.substring(0, MAX_DESCRIPTION_LENGTH) + '...';
                                    }

                                    const orderedDetailsCard = `
                <div class="row fade-in-animation" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                  <div class="product_details" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                    <div class="product_data_group" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                      <div class="product_image">
                        ${products.image.map((path, index) => {
                                        const newPath = path.replace("public", "");
                                        console.log(newPath);
                                        if (index === 0) {
                                            return `<img src="${newPath}" width="100"/>`;
                                        }
                                    })}
                      </div>
                      <div class="group_rating">
                        <div class="product_name">
                          <p>${products.name}</p>
                        </div>
                        <div class="showcase-rating">
                          <ion-icon name="star" role="img" class="md hydrated" aria-label="star"></ion-icon>
                          <ion-icon name="star" role="img" class="md hydrated" aria-label="star"></ion-icon>
                          <ion-icon name="star" role="img" class="md hydrated" aria-label="star"></ion-icon>
                          <ion-icon name="star-outline" role="img" class="md hydrated" aria-label="star outline"></ion-icon>
                          <ion-icon name="star-outline" role="img" class="md hydrated" aria-label="star outline"></ion-icon>
                        </div>
                      </div>
                    </div>
                    <div class="product_price">
                      <p>â‚¹<span>${order.totalPrice}/-</span></p>
                    </div>
                  </div>
                  <div class="tracking_status" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                    ${order.status === 'delivered'
                                            ? '<span class="notification_badge done"></span>'
                                            : order.status === 'cancelled'
                                                ? '<span class="notification_badge fail"></span>'
                                                : ''}
                    <p>${order.status}</p>
                    ${order.status === 'delivered' ? '<small>Your item has been delivered</small>' : ''}
                  </div>
                </div>`;

                                    const tempElement = document.createElement('div');
                                    tempElement.setAttribute("id", "order_item");
                                    tempElement.innerHTML = orderedDetailsCard;
                                    row.append(tempElement);
                                });
                        });

                        Promise.all(promises)
                            .then(() => {
                                // All rendering is complete
                            })
                            .catch(error => {
                                console.error(error);
                            });
                    })
                    .catch(error => {
                        console.error(error);
                    });
            });
        });

    </script>


    <script>

        const getOrders = () => {
            const row = document.querySelector('[orders-history]')
            $.ajax({
                type: "GET",
                url: "/api/v1/user/orders",
                success: function (response) {
                    const { data } = response
                    data.forEach((order) => {
                        order.items.forEach((product, index) => {
                            if (index === 0) {
                                const { product: productID } = product
                                $.ajax({
                                    type: "GET",
                                    url: `api/v1/admin/product/${productID}`,
                                    success: function (response) {

                                        const { products } = response.data;
                                        $.ajax({
                                            type: "GET",
                                            url: "/api/v1/user/cart",
                                            success: function (response) {
                                                const { cart } = response

                                                let shippingAddress = cart.shippingAddress.find(address => address._id === order.shippingAddress)
                                                if (!shippingAddress) {
                                                    console.log("no address found")
                                                }

                                                const MAX_DESCRIPTION_LENGTH = 50;

                                                let truncatedDescription = products.description;
                                                if (truncatedDescription.length > MAX_DESCRIPTION_LENGTH) {
                                                    truncatedDescription = truncatedDescription.substring(0, MAX_DESCRIPTION_LENGTH) + '...';
                                                }

                                                const orderedDetailsCard = `
                                            <div class="row fade-in-animation" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                                           <div class="product_details" data-order-id="${order.orderID}" onclick="handleOrders(event)">

                                           <div class="product_data_group" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                                            <div class="product_image">
                                                ${products.image.map((path, index) => {
                                                    const newPath = path.replace("public", "");
                                                    console.log(newPath)
                                                    if (index === 0) {
                                                        return `<img src="${newPath}" width="100"/>`
                                                    }
                                                })}
                                            </div>
                                            <div class="group_rating">
                                                <div class="product_name">
                                                <p>${products.name}</p>
                                            </div>
                                            <div class="showcase-rating">
                                                            <ion-icon name="star" role="img" class="md hydrated" aria-label="star"></ion-icon>
                                                            <ion-icon name="star" role="img" class="md hydrated" aria-label="star"></ion-icon>
                                                            <ion-icon name="star" role="img" class="md hydrated" aria-label="star"></ion-icon>
                                                            <ion-icon name="star-outline" role="img" class="md hydrated" aria-label="star outline"></ion-icon>
                                                            <ion-icon name="star-outline" role="img" class="md hydrated" aria-label="star outline"></ion-icon>
                                                        </div>
                                                </div>
                                            </div>

                                            <div class="product_price">
                                                <p>â‚¹<span>${order.totalPrice}/-</span></p>
                                            </div>
                                        </div>

                                        <div class="tracking_status" data-order-id="${order.orderID}" onclick="handleOrders(event)">
                                            ${order.status === 'delivered'
                                                        ? '<span class="notification_badge done"></span>'
                                                        : order.status === 'cancelled'
                                                            ? '<span class="notification_badge fail"></span>'
                                                            : ''}
                                            <p>${order.status}</p>
                                            ${order.status === 'delivered' ? '<small>Your item has been delivered</small>' : ''}
                                            </div>
                                           </div>`
                                                const tempElement = document.createElement('div');
                                                tempElement.setAttribute("id", "order_item");
                                                tempElement.innerHTML = orderedDetailsCard;
                                                row.append(tempElement)
                                            }
                                        })

                                    }
                                })
                            }



                        })

                    })
                }
            })

        }


        function showPopup(orderId) {
            var btnOpenForm = document.getElementById('btnOpenForm');
            var formPopupBg = document.querySelector('.form-popup-bg')
            var btnCloseForm = document.getElementById('btnCloseForm')

            const orderIdInput = document.getElementById('orderId');
            orderIdInput.value = orderId;

            formPopupBg.classList.add('is-visible')

            formPopupBg.addEventListener('click', function (event) {
                if (event.target.classList.contains('form-popup-bg') || event.target.id === 'btnCloseForm') {
                    event.preventDefault();
                    formPopupBg.classList.remove('is-visible');
                }
            });
        }



        const form = document.getElementById('reasonForCancel');

        let isValid = true;


        form.addEventListener('submit', async (e) => {
            e.preventDefault();

            clearErrorMessages();

            // Validate form fields
            const reason = document.getElementById('reason');
            const orderIdInput = document.getElementById('orderId');
            const orderId = orderIdInput.value;


            isValid = true;



            if (!reason.value.trim()) {
                showError("reason-error", "Please enter the reason.");
                isValid = false;
            }

            try {
                if (isValid) {
                    $.ajax({
                        url: `/api/v1/user/orders/${orderId}`,
                        method: 'PUT',
                        success: function (response) {
                            // getOrders()
                            showToast()
                            setToastMessage("Cancelled", response.message);
                        },
                        error: function (error) {
                            // Handle the error response
                        }
                    });
                    
                }
            } catch (error) {
                const message = error.response.data.message;
                console.log(message)
            }
        });

        function showError(element, errorMessage) {
            const errorElement = document.querySelector(`#${element}`)
            errorElement.textContent = errorMessage
        }

        function countWords(text) {
            const trimmedText = text.trim();
            const words = trimmedText.split(/\s+/);
            return words.length;
        }

        function clearErrorMessages() {
            const errorElements = document.querySelectorAll(".error");
            errorElements.forEach((element) => {
                element.textContent = "";
            });
        }



        window.onload = function () {
            getCategories()
            getOrders()
        }



        const handleOrders = (event) => {
            const orderID = event.target.dataset.orderId;

            $.ajax({
                type: "GET",
                url: `api/v1/user/orders/${orderID}`,
                success: function (response) {
                    const { data } = response;
                    localStorage.setItem("myorder", JSON.stringify(data));
                    window.location.href = "/myorder";
                },
            });

        };





    </script>



    <%- include ('../layouts/footer.ejs') %>